@page "/register"
@using MauiApp1.Models
@inject UserService UserService
@inject NavigationManager NavigationManager
@using MauiApp1.Components.Layout
@layout FirstLayout

<div class="container-fluid vh-100">
    <div class="row h-100">
        <!-- Logo Section -->
        <div class="col-md-6 d-flex align-items-center justify-content-center bg-dark">
            <img src="Images/undraw_savings_uwjn.svg" alt="Logo" class="img-fluid" style="max-height: 90%;" />
        </div>

        <!-- Form Section -->
        <div class="col-md-6 d-flex align-items-center justify-content-center">
            <div class="w-75">
                <h3 class="text-center mb-4">Register</h3>
                <div class="row">
                    <!-- First Row -->
                    <div class="col-md-6 form-group mb-3">
                        <label for="firstname">First Name</label>
                        <input id="firstname" type="text" class="form-control" placeholder="Enter first name" @bind="RegisterFirstname" />
                    </div>
                    <div class="col-md-6 form-group mb-3">
                        <label for="lastname">Last Name</label>
                        <input id="lastname" type="text" class="form-control" placeholder="Enter last name" @bind="RegisterLastname"/>
                    </div>

                    <!-- Second Row -->
                    <div class="col-md-6 form-group mb-3">
                        <label for="email">Email</label>
                        <input id="email" type="email" class="form-control" placeholder="Enter email" @bind="RegisterEmail" />
                    </div>

                    <div class="col-md-6 form-group mb-3">
                        <label for="currency">Preferred Currency</label>
                        <InputSelect @bind-Value="RegisterPreferredCurrency" @onchange="OnCurrencyChanged" Tvalue="string" >
                            <option value="">-- Select a Currency --</option>
                            @foreach (var currency in CurrencyOptions)
                            {
                                <option value="@currency">@currency</option>
                            }
                        </InputSelect>
                    </div>
                    <!-- Third Row -->
                    <div class="col-md-6 form-group mb-3">
                        <label for="repassword">Retype Password</label>
                        <input id="repassword" type="password" class="form-control" placeholder="Retype password" @bind="RegisterPassword"/>
                    </div>
                    <div class="col-md-6 form-group mb-3">
                        <label for="password">Password</label>
                        <input id="password" type="password" class="form-control" placeholder="Enter password" @bind="RegisterPassword2"/>
                    </div>
                </div>
                <button class="btn btn-primary w-100 mt-3" @onclick="RegisterUser">Register</button>
                <div class="text-center mt-3">
                    <a href="/" class="text-decoration-none">Login</a>
                </div>
                @if (!string.IsNullOrEmpty(Message))
                {
                    <p class="alert alert-info">@Message</p>
                }
            </div>
        </div>
    </div>
</div>


@code{

    private string RegisterFirstname { get; set; } = string.Empty;
    private string RegisterLastname { get; set; } = string.Empty;
    private string RegisterEmail { get; set; } = string.Empty;
    private string RegisterPassword { get; set; } = string.Empty;
    private string RegisterPassword2 { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private string RegisterUsername => $"{RegisterFirstname}{RegisterLastname}";
    private string RegisterPreferredCurrency { get; set; } = string.Empty;
    private List<string> CurrencyOptions = new List<string> { "USD", "EUR", "INR", "NPR", "YEN" };
    private List<User> Users = new();


    protected override void OnInitialized()
    {
        Users = UserService.LoadUsers();
    }

    private void OnCurrencyChanged(ChangeEventArgs e)
    {
        RegisterPreferredCurrency = e.Value?.ToString() ?? string.Empty;
    }

    private void RegisterUser()
    {
        // Form validation checks
        if (string.IsNullOrWhiteSpace(RegisterFirstname) ||
            string.IsNullOrWhiteSpace(RegisterLastname) ||
            string.IsNullOrWhiteSpace(RegisterEmail) ||
            string.IsNullOrWhiteSpace(RegisterPassword) ||
            string.IsNullOrWhiteSpace(RegisterPassword2))
        {
            Message = "Please fill up all fields!";
            return;
        }

        if (!RegisterPassword.Equals(RegisterPassword2))
        {
            Message = "Passwords do not match!";
            return;
        }

        if (string.IsNullOrEmpty(RegisterPreferredCurrency))
        {
            Message = "Please select a preferred currency!";
            return;
        }

        if (Users.Any(u => u.Username == RegisterUsername))
        {
            Message = "Username already exists!";
            return;
        }

        // Create new user and hash the password
        var newUser = new User
        {
           
            Username = RegisterUsername,
            Password = UserService.HashPassword(RegisterPassword),
            Email = RegisterEmail,
            PreferredCurrency = RegisterPreferredCurrency
        };

        newUser.UserId = Users.Count > 0 ? Users.Max(u => u.UserId) + 1 : 1;
        Users.Add(newUser);
        UserService.SaveUsers(Users);

        Message = "Registration successful. Redirecting to login...";
        Task.Delay(2000).ContinueWith(_ => NavigationManager.NavigateTo("/"));
    }
}
