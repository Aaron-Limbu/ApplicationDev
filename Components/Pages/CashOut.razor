@page "/cashout"
@using MauiApp1.Models
@inject TransactionService TransactionService
@inject UserService UserService

<h3 class="mb-3">Cash-Out Form</h3>

<EditForm Model="this" OnValidSubmit="cashout" class="needs-validation">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label class="form-label">Title:</label>
        <InputText @bind-Value="sTitle" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Amount:</label>
        <InputNumber @bind-Value="sAmount" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Category:</label>
        <InputText @bind-Value="sCategory" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Notes:</label>
        <InputText @bind-Value="sNote" class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label">Date:</label>
        <InputDate @bind-Value="sDate" class="form-control" />
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="alert alert-info">@Message</p>
    }

    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>


@code{
    private string sTitle { get; set; }= string.Empty; 
    private decimal sAmount { get; set; }
    private string sType { get; set; } = "Debit"; 
    private string sCategory { get; set; } = string.Empty; 
    private string sNote { get; set; } = string.Empty;
    private DateOnly sDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    private List<Transactions> transactions = new (); 
    private string Message { get; set; }= string.Empty; 

    protected override void OnInitialized()
    {
        transactions = TransactionService.LoadTransactions();
    }
    public void cashout()
    {
        try
        {
            var userid = UserService.getses();
            var newT = new Transactions
                {
                    Title = sTitle,
                    Amount = sAmount,
                    Type = sType,
                    Category = sCategory,
                    Notes = sNote,
                    Date = sDate,
                    UserId = userid
                };

            newT.TransactionId = transactions.Count > 0 ? transactions.Max(u => u.TransactionId) + 1 : 1;

            UserService.cashout(userid, sAmount);

            transactions.Add(newT);
            TransactionService.SaveTransactions(transactions);
            Message = "Cash out saved successfully!";
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }
}