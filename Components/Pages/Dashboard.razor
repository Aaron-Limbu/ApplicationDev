@page "/dashboard/{userid:int}"

@using MauiApp1.Models
@inject TransactionService TransactionService
@inject UserService UserService
@inject DebtService DebtService
@inject TagService TagService

<h1 class="text-center">Finance Dashboard</h1>
<h2 class="text-right">Balance: @balance</h2>

<div class="row text-center my-4">
    <div class="col-md-3">
        <div class="card bg-success text-white">
            <div class="card-body">
                <h5>Total Inflows</h5>
                <h2>@totalInflows</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-danger text-white">
            <div class="card-body">
                <h5>Total Outflows</h5>
                <h2>@totalOutflows</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-warning text-dark">
            <div class="card-body">
                <h5>Pending Debts</h5>
                <h2>@remainingDebts</h2>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <h5>Cleared Debts</h5>
                <h2>@clearedDebts</h2>
            </div>
        </div>
    </div>
</div>

<div class="card my-4">
    <div class="card-body">
        <h5>Filter Transactions</h5>
        <label for="typeFilter">Type:</label>
        <InputSelect @bind-Value="filterType" class="form-control" @onchange="onTypeChange" TValue="string">
            <option value="">-- Select a Type --</option>
            @foreach(var tp in Types)
            {
                <option value="@tp">@tp</option>
            }
        </InputSelect>
        <label for="dateRange">Date Range:</label>
        <input type="date" @bind="startDate" class="form-control" />
        <input type="date" @bind="endDate" class="form-control" />

        <label for="searchTitle">Search Title:</label>
        <input @bind="searchTitle" class="form-control" placeholder="Search by Title" />

        <button class="btn btn-primary mt-2" @onclick="ApplyFilters">Apply Filters</button>
    </div>
</div>

<div class="table-responsive my-4">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Date</th>
                <th>Title</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Tags</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions.OrderByDescending(t=>t.Date))
            {
                <tr>
                    <td>@transaction.Date</td>
                    <td>@transaction.Title</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Type</td>
                    <td>@string.Join(", ", tags.Where(t => t.T_id == transaction.TransactionId).Select(t => t.Name))</td>
                    <td>
                        <a class="btn btn-primary" href="@($"/addtag/{transaction.TransactionId}/{transaction.UserId}")">Add tag</a>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.TransactionId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="my-4">
    <h4>Pending Debts</h4>
    <table class="table">
        <thead>
            <tr>
                <td>Source</td>
                <td>Debt Amount</td>
                <td>Debt DueDate</td>
                <td>Actions</td>
            </tr>
        </thead>
        <tbody>
            @foreach(var debt in pendingDebts.OrderByDescending(dbs =>dbs.DueDate))
            {
                <tr>
                    <td>@debt.Source</td>
                    <td>@debt.Amount</td>
                    <td>@debt.DueDate</td>
                    <td><a class="btn btn-primary" @onclick="() => ClearDebt(debt.DebtId)">Clear Debt</a></td>
                </tr>
            }
        </tbody>

    </table>
    <h4>Cleared debts</h4>
    <table class="table">
        
        <thead>
            <tr>
                <td>Source</td>
                <td>Debt Amount</td>
                <td>Debt DueDate</td>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in Paid)
            {
                <tr>
                    <td>@p.Source</td>
                    <td>@p.Amount</td>
                    <td>@p.DueDate</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public int userid { get; set; }
    private List<Transactions> transactions = new();
    private List<Tag> tags = new();
    private List<Debts> debts = new();
    private List<Transactions> filteredTransactions = new();
    private List<Debts> pendingDebts = new();
    private string? Message { get; set; }
    private decimal totalInflows { get; set; }
    private decimal totalOutflows { get; set; }
    private decimal clearedDebts { get; set; }
    private decimal remainingDebts { get; set; }
    private decimal balance { get; set; } 
    private string filterType = string.Empty;
    private string searchTitle = string.Empty;
    private List<string> Types = new List<string> { "Credit","Debit"};
    private DateOnly startDate = DateOnly.FromDateTime(DateTime.Now.AddMonths(-1));
    private DateOnly endDate = DateOnly.FromDateTime(DateTime.Now);
    private List<Debts> Paid = new();
    protected override void OnParametersSet()
    {
        LoadData();
        CalculateSummary();
        ApplyFilters();
    }
    private void onTypeChange(ChangeEventArgs e)
    {
        filterType = e.Value?.ToString() ?? string.Empty; 
    }
    private void LoadData()
    {
        transactions = TransactionService.LoadTransactions().Where(t => t.UserId == userid).ToList();
        tags = TagService.LoadTags().Where(t => transactions.Any(tr => tr.TransactionId == t.T_id)).ToList();
        debts = DebtService.LoadDebts().Where(d => d.UserId == userid).ToList();
        balance = UserService.getBalance();
    }

    private void CalculateSummary()
    {
        totalInflows = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        totalOutflows = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);
        clearedDebts = debts.Where(d => d.IsCleared).Count();
        remainingDebts = debts.Where(d => !d.IsCleared).Sum(d => d.Amount);
        pendingDebts = debts.Where(d => !d.IsCleared).ToList();
        Paid = debts.Where(d => d.IsCleared).ToList();
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions
            .Where(t => (string.IsNullOrWhiteSpace(filterType) || t.Type == filterType) &&
                        (string.IsNullOrWhiteSpace(searchTitle) || t.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase)) &&
                        (t.Date >= startDate && t.Date <= endDate))
            .ToList();
    }

    private void DeleteTransaction(int t_id)
    {
        var transactionToDelete = transactions.FirstOrDefault(t => t.TransactionId == t_id);

        if (transactionToDelete != null)
        {
            transactions.Remove(transactionToDelete); 
            TransactionService.SaveTransactions(transactions); 
            CalculateSummary(); 
            Message = "Transaction deleted successfully.";
        }
        else
        {
            Message = "Transaction not found.";
        }
    }

    private void ClearDebt(int debtId)
    {
        // Find the debt to delete by its ID
        var debtToClear = debts.FirstOrDefault(d => d.DebtId == debtId);
        if(debtToClear != null)
        {
            debtToClear.IsCleared = true;
            DebtService.SaveDebts(debts);
            CalculateSummary();
            Message = "Debt has been cleared";

        }

    }

}
