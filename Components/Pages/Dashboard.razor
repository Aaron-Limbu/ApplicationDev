@page "/dashboard/{userid:int}"

@using MauiApp1.Models
@inject TransactionService TransactionService
@inject UserService UserService
@inject DebtService DebtService
@inject TagService TagService

<div class="container my-5">
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="text-left">Finance Dashboard</h1>
        <h2 class="text-right">Balance: @CurrencyType. @balance</h2>
    </div>

    <!-- Summary Cards -->
    <div class="row text-center">
        <!-- Total Inflows -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm border-0 rounded-4 bg-success text-white">
                <div class="card-body">
                    <h5>Total Inflows</h5>
                    <h2 class="font-weight-bold">@CurrencyType. @totalInflows</h2>
                    <i class="fas fa-wallet fa-2x float-end"></i>
                </div>
            </div>
        </div>
        <!-- Total Outflows -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm border-0 rounded-4 bg-danger text-white">
                <div class="card-body">
                    <h5>Total Outflows</h5>
                    <h2 class="font-weight-bold">@CurrencyType. @totalOutflows</h2>
                    <i class="fas fa-money-bill-wave fa-2x float-end"></i>
                </div>
            </div>
        </div>
        <!-- Pending Debts -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm border-0 rounded-4 bg-warning text-dark">
                <div class="card-body">
                    <h5>Pending Debts</h5>
                    <h2 class="font-weight-bold">@CurrencyType. @remainingDebts</h2>
                    <i class="fas fa-clock fa-2x float-end"></i>
                </div>
            </div>
        </div>
        <!-- Cleared Debts -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm border-0 rounded-4 bg-primary text-white">
                <div class="card-body">
                    <h5>Cleared Debts</h5>
                    <h2 class="font-weight-bold">@clearedDebts</h2>
                    <i class="fas fa-check-circle fa-2x float-end"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Transactions -->
    <div class="card shadow-sm border-0 rounded-4 my-4">
        <div class="card-body">
            <h5 class="mb-3">Filter Transactions</h5>
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="typeFilter" class="form-label">Type:</label>
                    <InputSelect @bind-Value="filterType" class="form-select" @onchange="onTypeChange" TValue="string">
                        <option value="">-- Select a Type --</option>
                        @foreach (var tp in Types)
                        {
                            <option value="@tp">@tp</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <label for="dateRange" class="form-label">Start Date:</label>
                    <input type="date" @bind="startDate" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label for="dateRange" class="form-label">End Date:</label>
                    <input type="date" @bind="endDate" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label for="searchTitle" class="form-label">Search Title:</label>
                    <input @bind="searchTitle" class="form-control" placeholder="Search by Title" />
                </div>
                <div class="col-12 text-end">
                    <button class="btn btn-primary mt-3" @onclick="ApplyFilters">Apply Filters</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="card shadow-sm border-0 rounded-4 my-4">
        <div class="card-body">
            <h4>Transactions</h4>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Title</th>
                            <th>Amount</th>
                            <th>Type</th>
                            <th>Tags</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in filteredTransactions.OrderByDescending(t => t.Date))
                        {
                            <tr>
                                <td>@transaction.Date</td>
                                <td>@transaction.Title</td>
                                <td>@CurrencyType. @transaction.Amount</td>
                                <td>@transaction.Type</td>
                                <td>@string.Join(", ", tags.Where(t => t.T_id == transaction.TransactionId).Select(t => t.Name))</td>
                                <td>
                                    <a class="btn btn-outline-primary" href="@($"/addtag/{transaction.TransactionId}/{transaction.UserId}")">Add Tag</a>
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteTransaction(transaction.TransactionId)">Delete</button>
                                    @if (tags.FirstOrDefault(u => u.TagId == transaction.TransactionId) != null)
                                    {
                                        <button class="btn btn-outline-danger"
                                                @onclick="() => clearTag(Convert.ToInt32(tags.FirstOrDefault(t => t.T_id == transaction.TransactionId)?.TagId))">
                                            Delete Tag
                                        </button>
                                    }
                                  

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Debts Section -->
    <div class="card shadow-sm border-0 rounded-4 my-4">
        <div class="card-body">
            <h4>Pending Debts</h4>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <td>Source</td>
                            <td>Debt Amount</td>
                            <td>Debt DueDate</td>
                            <td>Actions</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var debt in pendingDebts.OrderByDescending(dbs => dbs.DueDate))
                        {
                            <tr>
                                <td>@debt.Source</td>
                                <td>@CurrencyType. @debt.Amount</td>
                                <td>@debt.DueDate</td>
                                <td><a class="btn btn-outline-success" @onclick="() => ClearDebt(debt.DebtId)">Clear Debt</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <h4 class="mt-4">Cleared Debts</h4>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <td>Source</td>
                            <td>Debt Amount</td>
                            <td>Debt DueDate</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in Paid)
                        {
                            <tr>
                                <td>@p.Source</td>
                                <td>@CurrencyType. @p.Amount</td>
                                <td>@p.DueDate</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public int userid { get; set; }
    private List<Transactions> transactions = new();
    private List<Tag> tags = new();
    private List<Debts> debts = new();
    private List<Transactions> filteredTransactions = new();
    private List<Debts> pendingDebts = new();
    private string? Message { get; set; }
    private decimal totalInflows { get; set; }
    private decimal totalOutflows { get; set; }
    private decimal clearedDebts { get; set; }
    private decimal remainingDebts { get; set; }
    private decimal balance { get; set; } 
    private string filterType = string.Empty;
    private string searchTitle = string.Empty;
    private List<string> Types = new List<string> { "Credit","Debit"};
    private DateOnly startDate = DateOnly.FromDateTime(DateTime.Now.AddMonths(-1));
    private DateOnly endDate = DateOnly.FromDateTime(DateTime.Now);
    private List<Debts> Paid = new();
    private string CurrencyType { get; set; } = string.Empty;


    protected override void OnParametersSet()
    {
        LoadData();
        CalculateSummary();
        ApplyFilters();
    }
    private void onTypeChange(ChangeEventArgs e)
    {
        filterType = e.Value?.ToString() ?? string.Empty; 
    }
    private void LoadData()
    {
        transactions = TransactionService.LoadTransactions().Where(t => t.UserId == userid).ToList();
        tags = TagService.LoadTags().Where(t => transactions.Any(tr => tr.TransactionId == t.T_id)).ToList();
        debts = DebtService.LoadDebts().Where(d => d.UserId == userid).ToList();
        balance = UserService.getBalance();
        CurrencyType = UserService.getUserPreferredCurrency(); 
    }

    private void CalculateSummary()
    {
        totalInflows = transactions.Where(t => t.Type == "Credit").Sum(t => t.Amount);
        totalOutflows = transactions.Where(t => t.Type == "Debit").Sum(t => t.Amount);
        clearedDebts = debts.Where(d => d.IsCleared).Count();
        remainingDebts = debts.Where(d => !d.IsCleared).Sum(d => d.Amount);
        pendingDebts = debts.Where(d => !d.IsCleared).ToList();
        Paid = debts.Where(d => d.IsCleared).ToList();
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions
            .Where(t => (string.IsNullOrWhiteSpace(filterType) || t.Type == filterType) &&
                        (string.IsNullOrWhiteSpace(searchTitle) || t.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase)) &&
                        (t.Date >= startDate && t.Date <= endDate))
            .ToList();
    }

    private void DeleteTransaction(int t_id)
    {
        var transactionToDelete = transactions.FirstOrDefault(t => t.TransactionId == t_id);

        if (transactionToDelete != null)
        {
            transactions.Remove(transactionToDelete); 
            TransactionService.SaveTransactions(transactions); 
            CalculateSummary(); 
            Message = "Transaction deleted successfully.";
        }
        else
        {
            Message = "Transaction not found.";
        }
    }

    private void ClearDebt(int debtId)
    {
        // Find the debt to delete by its ID
        var debtToClear = debts.FirstOrDefault(d => d.DebtId == debtId);
        if(debtToClear != null)
        {
            debtToClear.IsCleared = true;
            DebtService.SaveDebts(debts);
            CalculateSummary();
            Message = "Debt has been cleared";

        }

    }
    public void clearTag(int T_id)
    {
        try
        {
            TagService.remove_tag(T_id);
            Message = "Tag successfully removed";
        }
        catch(Exception ex)
        { 
            Message = $"Error: {ex}";
        }
    }

}
